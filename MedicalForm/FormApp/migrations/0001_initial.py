# Generated by Django 4.2.2 on 2023-06-25 17:56

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ApplicationFormModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.CharField(blank=True, default='', max_length=500)),
                ('student_name', models.CharField(blank=True, default='', max_length=500)),
                ('course', models.CharField(blank=True, default='', max_length=200)),
                ('date_of_birth', models.DateField(blank=True, default=None, null=True)),
                ('gender', models.CharField(blank=True, default='', max_length=100)),
                ('is_hostellite', models.BooleanField(blank=True, default=False)),
                ('community', models.CharField(blank=True, choices=[('OC', 'OC'), ('BC', 'BC'), ('MBC', 'MBc'), ('SC', 'SC'), ('SCA', 'SCA'), ('ST', 'ST')], default='', max_length=20)),
                ('religion', models.CharField(blank=True, default='', max_length=300)),
                ('native_place', models.CharField(blank=True, default='', max_length=500)),
                ('blood_group', models.CharField(blank=True, default='', max_length=30)),
                ('height', models.DecimalField(blank=True, decimal_places=2, default=0.0, max_digits=5)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, default=0.0, max_digits=5)),
                ('caste', models.CharField(blank=True, default='', max_length=300)),
                ('address_for_communication', models.CharField(blank=True, default='', max_length=5000)),
                ('date_of_admission', models.DateField(blank=True, default=None, null=True)),
                ('address_local_guardian', models.CharField(blank=True, default='', max_length=5000)),
                ('nationality', models.CharField(blank=True, default='', max_length=200)),
                ('mother_tongue', models.CharField(blank=True, default='', max_length=300)),
                ('father_name', models.CharField(blank=True, default='', max_length=500)),
                ('father_occupation', models.CharField(blank=True, default='', max_length=500)),
                ('father_occupation_address', models.CharField(blank=True, default='', max_length=500)),
                ('father_phone_number', models.CharField(blank=True, default='', max_length=20)),
                ('father_email', models.EmailField(blank=True, default='', max_length=200)),
                ('mother_name', models.CharField(blank=True, default='', max_length=500)),
                ('mother_occupation', models.CharField(blank=True, default='', max_length=500)),
                ('mother_occupation_address', models.CharField(blank=True, default='', max_length=500)),
                ('mother_phone_number', models.CharField(blank=True, default='', max_length=20)),
                ('mother_email', models.EmailField(blank=True, default='', max_length=200)),
                ('student_contact_no', models.CharField(blank=True, default='', max_length=50)),
                ('student_email_id', models.EmailField(blank=True, default='', max_length=200)),
                ('mobile_1', models.CharField(blank=True, default='', max_length=30)),
                ('mobile_2', models.CharField(blank=True, default='', max_length=30)),
                ('mobile_3', models.CharField(blank=True, default='', max_length=30)),
                ('guardian_mobile', models.CharField(blank=True, default='', max_length=20)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ApplicationForm', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AdmissionFormModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.CharField(blank=True, default='', max_length=500)),
                ('student_contact_no', models.CharField(blank=True, default='', max_length=50)),
                ('student_email_id', models.EmailField(blank=True, default='', max_length=200)),
                ('username', models.CharField(max_length=500)),
                ('guardian_mobile', models.CharField(blank=True, default='', max_length=20)),
                ('father_name', models.CharField(blank=True, default='', max_length=500)),
                ('father_occupation', models.CharField(blank=True, default='', max_length=500)),
                ('father_occupation_address', models.CharField(blank=True, default='', max_length=500)),
                ('father_phone_number', models.CharField(blank=True, default='', max_length=20)),
                ('father_email', models.EmailField(blank=True, default='', max_length=200)),
                ('mother_name', models.CharField(blank=True, default='', max_length=500)),
                ('mother_occupation', models.CharField(blank=True, default='', max_length=500)),
                ('mother_occupation_address', models.CharField(blank=True, default='', max_length=500)),
                ('mother_phone_number', models.CharField(blank=True, default='', max_length=20)),
                ('mother_email', models.EmailField(blank=True, default='', max_length=200)),
                ('serial_no', models.CharField(blank=True, default='', max_length=500)),
                ('ar_number', models.CharField(blank=True, default='', max_length=200)),
                ('date_of_admission', models.DateField(blank=True, default=None, null=True)),
                ('admission_no', models.CharField(blank=True, default='', max_length=500)),
                ('student_name', models.CharField(blank=True, default='', max_length=500)),
                ('quota', models.CharField(blank=True, choices=[('Govt', 'Govt'), ('Mgt', 'Mgt'), ('NRI', 'NRI'), ('NRILapsed', 'NRILapsed')], default='', max_length=20)),
                ('date_of_birth', models.DateField(blank=True, default=None, null=True)),
                ('community', models.CharField(blank=True, choices=[('OC', 'OC'), ('BC', 'BC'), ('MBC', 'MBc'), ('SC', 'SC'), ('SCA', 'SCA'), ('ST', 'ST')], default='', max_length=20)),
                ('is_hostellite', models.BooleanField(blank=True, default=False)),
                ('hsc_register_no', models.CharField(blank=True, default='', max_length=100)),
                ('board_of_study', models.CharField(blank=True, choices=[('State', 'State'), ('CBSE', 'CBSE'), ('ICSE', 'ICSE'), ('Others', 'Others')], default='', max_length=30)),
                ('neet_roll_no', models.CharField(blank=True, default='', max_length=200)),
                ('hsc_year_of_passing', models.IntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(2000), django.core.validators.MaxValueValidator(3000)])),
                ('neet_year', models.IntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(2000), django.core.validators.MaxValueValidator(3000)])),
                ('neet_study_center_name', models.CharField(blank=True, default='', max_length=500)),
                ('no_of_neet_attempts', models.IntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('neet_air', models.IntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('selection_committee_allotment_order_no', models.CharField(blank=True, default='', max_length=500)),
                ('selection_committee_general_rank', models.CharField(blank=True, default='', max_length=500)),
                ('allotment_order_date', models.DateField(blank=True, default=None, null=True)),
                ('neet_physics_mark', models.IntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('neet_chemistry_mark', models.IntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('neet_biology_mark', models.IntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('neet_total_mark', models.IntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(720)])),
                ('neet_physics_percentile', models.DecimalField(blank=True, decimal_places=8, default=0.0, max_digits=11, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('neet_chemistry_percentile', models.DecimalField(blank=True, decimal_places=8, default=0.0, max_digits=11, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('neet_biology_percentile', models.DecimalField(blank=True, decimal_places=8, default=0.0, max_digits=11, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('neet_total_percentile', models.DecimalField(blank=True, decimal_places=8, default=0.0, max_digits=11, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('hsc_physics_mark', models.DecimalField(blank=True, decimal_places=4, default=0.0, max_digits=7, validators=[django.core.validators.MinValueValidator(0)])),
                ('hsc_chemistry_mark', models.DecimalField(blank=True, decimal_places=4, default=0.0, max_digits=7, validators=[django.core.validators.MinValueValidator(0)])),
                ('hsc_biology_mark', models.DecimalField(blank=True, decimal_places=4, default=0.0, max_digits=7, validators=[django.core.validators.MinValueValidator(0)])),
                ('hsc_total_mark', models.DecimalField(blank=True, decimal_places=4, default=0.0, max_digits=7, validators=[django.core.validators.MinValueValidator(0)])),
                ('hsc_marks_maximum', models.DecimalField(blank=True, decimal_places=4, default=0.0, max_digits=7, validators=[django.core.validators.MinValueValidator(0)])),
                ('pcb_percentage', models.DecimalField(blank=True, decimal_places=4, default=0.0, max_digits=7, validators=[django.core.validators.MinValueValidator(0)])),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='AdmissionForm', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
